import static org.fest.assertions.Assertions.assertThat;
import static play.mvc.Http.Status.BAD_REQUEST;
import static play.mvc.Http.Status.OK;
import static play.mvc.Http.Status.SEE_OTHER;
import static play.test.Helpers.callAction;
import static play.test.Helpers.contentAsString;
import static play.test.Helpers.fakeApplication;
import static play.test.Helpers.fakeRequest;
import static play.test.Helpers.flash;
import static play.test.Helpers.redirectLocation;
import static play.test.Helpers.running;
import static play.test.Helpers.status;

import java.util.HashMap;
import java.util.Map;

import org.junit.Test;

import play.mvc.Result;

public class FunctionalTest {

	@Test
	public void createANewComputer() {
		running(fakeApplication(), new Runnable() {
			@Override
			public void run() {
				Result result = callAction(controllers.routes.ref.Application
						.save());

				assertThat(status(result)).isEqualTo(BAD_REQUEST);

				final Map<String, String> data = new HashMap<String, String>();
				data.put("name", "FooBar");
				data.put("introduced", "badbadbad");
				data.put("company.id", "1");

				result = callAction(controllers.routes.ref.Application.save(),
						fakeRequest().withFormUrlEncodedBody(data));

				assertThat(status(result)).isEqualTo(BAD_REQUEST);
				assertThat(contentAsString(result)).contains(
						"<option value=\"1\" selected>Apple Inc.</option>");
				assertThat(contentAsString(result))
						.contains(
								"<input type=\"text\" id=\"introduced\" name=\"introduced\" value=\"badbadbad\" >");
				assertThat(contentAsString(result))
						.contains(
								"<input type=\"text\" id=\"name\" name=\"name\" value=\"FooBar\" >");

				data.put("introduced", "2011-12-24");

				result = callAction(controllers.routes.ref.Application.save(),
						fakeRequest().withFormUrlEncodedBody(data));

				assertThat(status(result)).isEqualTo(SEE_OTHER);
				assertThat(redirectLocation(result)).isEqualTo("/computers");
				assertThat(flash(result).get("success")).isEqualTo(
						"Computer FooBar has been created");

				result = callAction(controllers.routes.ref.Application.list(0,
						"name", "asc", "FooBar"));
				assertThat(status(result)).isEqualTo(OK);
				assertThat(contentAsString(result)).contains(
						"One computer found");

			}
		});
	}

	@Test
	public void filterComputerByName() {
		running(fakeApplication(), new Runnable() {
			@Override
			public void run() {
				final Result result = callAction(controllers.routes.ref.Application
						.list(0, "name", "asc", "Apple"));

				assertThat(status(result)).isEqualTo(OK);
				assertThat(contentAsString(result)).contains(
						"13 computers found");
			}
		});
	}

	@Test
	public void listComputersOnTheFirstPage() {
		running(fakeApplication(), new Runnable() {
			@Override
			public void run() {
				final Result result = callAction(controllers.routes.ref.Application
						.list(0, "name", "asc", ""));

				assertThat(status(result)).isEqualTo(OK);
				assertThat(contentAsString(result)).contains(
						"574 computers found");
			}
		});
	}

	@Test
	public void redirectHomePage() {
		running(fakeApplication(), new Runnable() {
			@Override
			public void run() {
				final Result result = callAction(controllers.routes.ref.Application
						.index());

				assertThat(status(result)).isEqualTo(SEE_OTHER);
				assertThat(redirectLocation(result)).isEqualTo("/computers");
			}
		});
	}

}
